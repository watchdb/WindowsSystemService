using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.ServiceProcess;
using System.Text;
using System.IO;
using System.Text.RegularExpressions;
using System.Management;
using System.Globalization;
using WindowsServiceAsWatchdb;

namespace WindowsService1
{
    public partial class ServiceAsWatchdb : ServiceBase
    {
        public ServiceAsWatchdb()
        {
            InitializeComponent();
        } 

        protected override void OnStart(string[] args)
        {
            
            // TODO: 在此处添加代码以启动服务。
            timer1.Enabled = true;
            string iniPath = AppDomain.CurrentDomain.BaseDirectory + "config.ini";
            INIClass clsIni = new INIClass(iniPath);
            int interval = 30000;
            if (clsIni.ExistINIFile())
            {
                interval = Int32.Parse(clsIni.IniReadValue("intervalsetting", "interval").ToString()) * 1000;//间隔时间
                timer1.Interval = interval;//单位：MS
            }
            else 
            {
                timer1.Interval = interval;//单位：MS
            }
            timer1.Start();
              
            timerCloseServer.Enabled = true;
            timerCloseServer.Interval = interval;//单位：MS
            timerCloseServer.Start();
              
        }

        protected override void OnStop()
        {
            // TODO: 在此处添加代码以执行停止服务所需的关闭操作。
            try
            {
                timer1.Enabled = false;
                timer1.Stop();

                timerCloseServer.Enabled = false;
                timerCloseServer.Stop();
            }
            catch
            {

            }
        }


        public static void WriteLog(string strLog)
        {
            EventLog log = new EventLog();
            log.Source = "ServiceAsWatchdb";
            log.WriteEntry(strLog);
        }

        /// <summary>
        /// 执行DOS命令，返回DOS命令的输出
        /// </summary>
        /// <param name="dosCommand">dos命令</param>
        /// <returns>返回输出，如果发生异常，返回空字符串</returns>
        public static string ExecuteDos(string dosCommand)
        {
            string output = ""; //输出字符串
            if (dosCommand != null && dosCommand != "")
            {
                Process process = new Process(); //创建进程对象
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe"; //设定需要执行的命令 
                startInfo.Arguments = "/C \"" + dosCommand + "\""; //设定参数，其中的“/C”表示执行完命令后马上退出
                startInfo.UseShellExecute = false; //不使用系统外壳程序启动
                startInfo.RedirectStandardInput = false; //不重定向输入
                startInfo.RedirectStandardOutput = false; //重定向输出
                startInfo.CreateNoWindow = false; //不创建窗口 
                process.StartInfo.WindowStyle = ProcessWindowStyle.Normal;
                process.StartInfo = startInfo;
                 
                try   
                {
                    Process p = new Process();

                    try
                    {
                        if (process.Start()) //开始进程
                        {
                            //process.WaitForExit(); //这里无限等待进程结束
                            output = dosCommand + "程序执行成功。";
                        }
                        WriteLog( dosCommand + " 执行成功！ 执行时间：" + DateTime.Now.ToString());
                    }
                    catch (Exception ex)
                    {
                        WriteLog("Dos命令" + dosCommand + "执行失败:" + ex.Message + "，时间" + DateTime.Now.ToString());
                    }
                    finally
                    {
                        if (process != null)
                            process.Close();
                    }
                }
                catch
                {
                    WriteLog("Dos命令" + dosCommand + "执行失败，时间" + DateTime.Now.ToString());
                }
                finally
                {
                    if (process != null)
                        process.Close();
                }
            }

            return output;

        }

        /// <summary>
        /// 定时器，检测相关服务是否被启动，否则自动启动
        /// 2010年12月26日16:31:07
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timer1_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            timer1.Enabled = false;  
            try
            {
                string iniPath = AppDomain.CurrentDomain.BaseDirectory + "config.ini";
                INIClass clsIni = new INIClass(iniPath);
                if (clsIni.ExistINIFile())
                {
                    try
                    {
                        string appPath = "";
                        string processName = "";

                        //定时监控应用程序 1 的开启情况
                        appPath = clsIni.IniReadValue("application", "app1Path").ToString();
                        if (appPath != null && appPath.Length > 0)
                        {
                            processName = appPath.Substring(appPath.LastIndexOf("\\") + 1).Replace(".exe", "");

                            if (System.Diagnostics.Process.GetProcessesByName(processName).Length == 0)
                            {
                                string str = ExecuteDos(appPath);
                            }
                        }

                        //定时监控应用程序 2 的开启情况
                        appPath = clsIni.IniReadValue("application", "app2Path").ToString();
                        if (appPath != null && appPath.Length > 0)
                        {
                            processName = appPath.Substring(appPath.LastIndexOf("\\") + 1).Replace(".exe", "");

                            if (System.Diagnostics.Process.GetProcessesByName(processName).Length == 0)
                            {
                                string str = ExecuteDos(appPath);
                            }
                        }

                        //定时监控应用程序 3 的开启情况
                        appPath = clsIni.IniReadValue("application", "app3Path").ToString();
                        if (appPath != null && appPath.Length > 0)
                        {
                            processName = appPath.Substring(appPath.LastIndexOf("\\") + 1).Replace(".exe", "");

                            if (System.Diagnostics.Process.GetProcessesByName(processName).Length == 0)
                            {
                                string str = ExecuteDos(appPath);
                            }
                        }

                        //定时监控应用程序 4 的开启情况
                        appPath = clsIni.IniReadValue("application", "app4Path").ToString();
                        if (appPath != null && appPath.Length > 0)
                        {
                            processName = appPath.Substring(appPath.LastIndexOf("\\") + 1).Replace(".exe", "");

                            if (System.Diagnostics.Process.GetProcessesByName(processName).Length == 0)
                            {  
                                string str = ExecuteDos(appPath);
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        WriteLog("错误：" + ex.Message);
                    }
                }
                else
                {
                    WriteLog("INI文件不存在：" + iniPath);
                }

            }
            catch (Exception ex)
            {
                WriteLog("配置文件不存在，时间" + DateTime.Now.ToString() + ".错误信息：" + ex.Message);
            }
            timer1.Enabled = true;  
        }

        /// <summary>
        /// 定时关闭相关进程
        /// 2010年12月26日16:32:09
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void timerCloseServer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            timerCloseServer.Enabled = false;
            try
            {

                string iniPath = AppDomain.CurrentDomain.BaseDirectory + "config.ini";
                INIClass clsIni = new INIClass(iniPath);
                if (clsIni.ExistINIFile())
                {
                    try
                    {
                        string appName = "";
                        string closeDate = "";
                        string processName = "";

                        //关闭指定的应用程序 1 
                        appName = clsIni.IniReadValue("timerClose1", "appName").ToString();
                        closeDate = clsIni.IniReadValue("timerClose1", "closeDate").ToString();

                        if ((appName != null && appName.Length > 0) 
                            && (closeDate != null && closeDate.Length > 0))
                        {
                            if (DateTime.Now.ToString("HH:mm").Equals(closeDate))
                            {
                                if (System.Diagnostics.Process.GetProcessesByName(appName).Length > 0)
                                {
                                    ProcessUtility.KillTree(System.Diagnostics.Process.GetProcessesByName(appName)[0].Id);
                                    WriteLog(appName + "进程结束成功。结束时间：" + DateTime.Now.ToString());
                                }
                            }
                        }

                        //关闭指定的应用程序 2
                        appName = clsIni.IniReadValue("timerClose2", "appName").ToString();
                        closeDate = clsIni.IniReadValue("timerClose2", "closeDate").ToString();

                        if ((appName != null && appName.Length > 0)
                            && (closeDate != null && closeDate.Length > 0))
                        {
                            if (DateTime.Now.ToString("HH:mm").Equals(closeDate))
                            {
                                if (System.Diagnostics.Process.GetProcessesByName(appName).Length > 0)
                                {
                                    ProcessUtility.KillTree(System.Diagnostics.Process.GetProcessesByName(appName)[0].Id);
                                    WriteLog(appName + "进程结束成功。结束时间：" + DateTime.Now.ToString());
                                }
                            }
                        }

                        //关闭指定的应用程序 3
                        appName = clsIni.IniReadValue("timerClose3", "appName").ToString();
                        closeDate = clsIni.IniReadValue("timerClose3", "closeDate").ToString();

                        if ((appName != null && appName.Length > 0)
                            && (closeDate != null && closeDate.Length > 0))
                        {
                            if (DateTime.Now.ToString("HH:mm").Equals(closeDate))
                            {
                                if (System.Diagnostics.Process.GetProcessesByName(appName).Length > 0)
                                {
                                    ProcessUtility.KillTree(System.Diagnostics.Process.GetProcessesByName(appName)[0].Id);
                                    WriteLog(appName + "进程结束成功。结束时间：" + DateTime.Now.ToString());
                                }
                            }
                        }

                        //关闭指定的应用程序 4
                        appName = clsIni.IniReadValue("timerClose4", "appName").ToString();
                        closeDate = clsIni.IniReadValue("timerClose4", "closeDate").ToString();

                        if ((appName != null && appName.Length > 0)
                            && (closeDate != null && closeDate.Length > 0))
                        {
                            if (DateTime.Now.ToString("HH:mm").Equals(closeDate))
                            {
                                if (System.Diagnostics.Process.GetProcessesByName(appName).Length > 0)
                                {
                                    ProcessUtility.KillTree(System.Diagnostics.Process.GetProcessesByName(appName)[0].Id);
                                    WriteLog(appName + "进程结束成功。结束时间：" + DateTime.Now.ToString());
                                }
                            }
                        }

                    }
                    catch (Exception ex)
                    {
                        WriteLog("错误：" + ex.Message);
                    }
                }
                else 
                {
                    return;
                }
                if (DateTime.Now.ToString("mm").Equals("33"))
                {
                    
                }

            }
            catch (Exception ex)
            {
                WriteLog("进程结束失败" + DateTime.Now.ToString() + ".错误信息：" + ex.Message);
            }
            timerCloseServer.Enabled = true;
        }

      
    }
}
